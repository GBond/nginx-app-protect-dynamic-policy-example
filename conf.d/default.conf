server {
        listen       80;
        server_name  localhost;
        proxy_http_version 1.1;

        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_ignore_client_abort on;

        client_max_body_size 0;
        default_type text/html;

        app_protect_enable on;
        app_protect_security_log_enable on;
        # send the logs to the logstash instance on our ELK stack.
        app_protect_security_log "/etc/app_protect/conf/log_default.json" syslog:server=10.1.1.11:5144;

        ## NGINX Plus API monitoring:
        status_zone arcadia_server;

        ## in this lab, there are 2 ingress definitions for arcadia
        ## no-waf is the ingress (virtualServer) without NAP enabled
        proxy_set_header Host no-waf.arcadia-finance.io;

        if ($ip_flag = yes_friendly_IP){
            set $friendy_flag T;
        }

        if ($agent_flag = 'yes_friendly_agent'){
            set $friendy_flag "${friendy_flag}T";
        }

         #default policy is strict
        set $location "strict";
        
        if ($friendy_flag  = "TT") {
               set $location "default";
        }

        if ($friendy_flag  = "T") {
               set $location "medium";
        }

        # this location is for updating the config
        # POST to here with JSON for allow/disallow
        # curl 127.0.0.1/api/7/http/keyvals/one -X POST -d '{"71.105.178.190": "friendly", "0.0.0.0/0": "Not_friendly"}'
        # GET from here to pull the config
        # curl 127.0.0.1/api/7/http/keyvals/one > /etc/nginx/one.keyval
        # TODO: add a location to do this as a write out for local storage
        location /nap_exception {
            app_protect_enable off;
            api write=on;

            # protect this house
            allow 127.0.0.1;
            deny all;
        }

        # main service
        location / {
           try_files $uri @$location;
           proxy_pass http://arcadia_ingress_nodeports$request_uri;
           status_zone main_service;
         }
  
        location @default {
            app_protect_enable off;
            app_protect_policy_file app_protect_default_policy;
            proxy_pass  http://arcadia_ingress_nodeports$request_uri?=$ip_flag&$agent_flag&$location;
            app_protect_security_log_enable on;
            app_protect_security_log "/opt/app_protect/share/defaults/log_all.json" /var/log/app_protect/requests.log;
        }
        location @medium {
            app_protect_enable off;
            app_protect_policy_file "/etc/nginx/conf.d/medium_policy.json";
            proxy_pass  http://arcadia_ingress_nodeports$request_uri?=$ip_flag&$agent_flag&$location;
            app_protect_security_log_enable on;
            app_protect_security_log "/opt/app_protect/share/defaults/log_all.json" /var/log/app_protect/requests.log;
        }
        location @strict {
            app_protect_enable off;
            app_protect_policy_file app_protect_strict_policy;
            proxy_pass  http://arcadia_ingress_nodeports$request_uri?=$ip_flag&$agent_flag&$location;
            app_protect_security_log_enable on;
            app_protect_security_log "/opt/app_protect/share/defaults/log_all.json" /var/log/app_protect/requests.log;
        }
        location @proxy {
            app_protect_enable off;
            client_max_body_size 0;
            default_type text/html;
            return 200 "Hello! I got your URI request - $request_uri\n";
        }

}

upstream arcadia_ingress_nodeports {
    zone arcadia_ingress_nodeports 128k;
    server rke1:80;
}

